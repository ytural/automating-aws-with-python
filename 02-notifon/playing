import boto3
session = boto3.Session(profile_name='account_name')
ec2=session.resource('ec2')

####FindImage name based on ID
image_name=ec2.Image('ami-0b69ea66ff7391e80').name

####Create Key file and save on local disk
key_name = 'PythonAutomation_key'
key_path = key_name + '.pem'
key = ec2.create_key_pair(KeyName=key_name)
with open (key_path, 'w') as key_file:
    key_file.write(key.key_material)

####Filter ami based on owner as amazon and ami name
ami_name = ec2.images.filter(Owners=['amazon'], Filters=[{'Name':'name', 'Values':[image_name]}])
ami_id=list(ami_name)[0]
ami_id.id

####Create Ec2 instance
ec2_instance = ec2.create_instances(
                ImageId=ami_id.id,
                InstanceType='t1.micro',
                KeyName=key_name,
                MaxCount=1,
                MinCount=1)


####Create EC2 instance with tags
ec2_instance = ec2.create_instances(
                ImageId=ami_id.id,
                InstanceType='t1.micro',
                KeyName=key_name,
                MaxCount=1,
                MinCount=1,
                SecurityGroupIds=['sg-0794c22f2df7eece8'],
                TagSpecifications=[
                                    {
                                        'ResourceType': 'instance',
                                        'Tags': [
                                            {
                                                'Key': 'Name',
                                                'Value': str('server'+str(randint(1,10)))
                                            },
                                        ]
                                    },
                                ])



####Get list of Security Groups
security_group_iterator = ec2.security_groups.all()

####Get rules from security group
my_security_group = list(security_group_iterator)[0]
my_security_group_rules = my_security_group.ip_permissions
[{'FromPort': 22,
  'IpProtocol': 'tcp',
  'IpRanges': [{'CidrIp': '72.21.198.0/24'}],
  'Ipv6Ranges': [],
  'PrefixListIds': [],
  'ToPort': 22,
  'UserIdGroupPairs': []}]


#### Update Security Group rules
defsg.authorize_ingress(
				IpPermissions=
							[{'FromPort': 22,
							  'IpProtocol': 'tcp',
							  'IpRanges': [{'CidrIp': '72.21.198.0/24'}],
							  'Ipv6Ranges': [],
							  'PrefixListIds': [],
							  'ToPort': 22,
							  'UserIdGroupPairs': []}]

)


### AutoScaling policy triggering from python
as_client = session.client('autoscaling')
as_client.describe_auto_scaling_groups()
as_client.describe_policies()
as_client.execute_policy(AutoScalingGroupName='Notifon Example Group', PolicyName='Scale Down')
as_client.execute_policy(AutoScalingGroupName='Notifon Example Group', PolicyName='Scale Up')
as_client.execute_policy(AutoScalingGroupName='Notifon Example Group', PolicyName='Scale Up')